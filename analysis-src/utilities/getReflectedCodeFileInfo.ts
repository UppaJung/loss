export const getReflectedCodeFileInfo = (param: {'import.meta.url': string}) => {
	const atSource = param['import.meta.url'];
	const atThisFile = import.meta.url;
	let longestCommonPrefixLength = 0;
	while (atSource.length > longestCommonPrefixLength && atSource[longestCommonPrefixLength] === atThisFile[longestCommonPrefixLength]) {
		longestCommonPrefixLength++;
	}
	const codeFileLocalPath = atSource.slice(longestCommonPrefixLength);
	const codeFileNameWithExtension = atSource.split(/[\\\/]/).toReversed()[0];
	const codeFileNameWithoutExtension = codeFileNameWithExtension.slice(0, codeFileNameWithExtension.lastIndexOf('.'));

	const warningHeaderTs = `// DO NOT MODIFY (your modifications will be overwritten)${"\n"}// This file is automatically (re-)generated by ${codeFileLocalPath}.${"\n\n"}`;
	const warningHeaderHtml = `<!-- DO NOT MODIFY (your modifications will be overwritten)${"\n"}     This file is automatically (re-)generated by ${codeFileLocalPath}. -->${"\n\n"}`;
	return {codeFileLocalPath, codeFileNameWithExtension, codeFileNameWithoutExtension, warningHeaderHtml, warningHeaderTs};
}