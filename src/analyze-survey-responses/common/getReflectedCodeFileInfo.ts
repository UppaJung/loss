/**
 * Call by passing in `import.meta.url` as the parameter.
 * 
 * ```ts
 * const {codeFileLocalPath, codeFileNameWithExtension, codeFileNameWithoutExtension, warningHeaderHtml, warningHeaderTs} = getReflectedCodeFileInfo({'import.meta.url': import.meta.url});
 * ```
 * @param param set to {'import.meta.url': import.meta.url} to ensure that the file name of the file you are calling form
 * is available to this function.
 * @returns An object with fields generated from the file path you are calling from.
 * Field `codeFileLocalPath` is the path to the file you are calling from after removing the common prefix between that file and
 * the file in which this function is implemented. Fields `codeFileNameWithExtension` and `codeFileNameWithoutExtension` are the file name
 * with and without the extension (e.g. `my-file.ts` and `my-file`, respectively). Fields `warningHeaderHtml` and `warningHeaderTs` are 
 * warnings that you can prepend to generated files saying they were generated by the file you are calling from.
 */
export const getReflectedCodeFileInfo = (param: {'import.meta.url': string}) => {
	const atSource = param['import.meta.url'];
	const atThisFile = import.meta.url;
	let longestCommonPrefixLength = 0;
	while (atSource.length > longestCommonPrefixLength && atSource[longestCommonPrefixLength] === atThisFile[longestCommonPrefixLength]) {
		longestCommonPrefixLength++;
	}
	const codeFileLocalPath = atSource.slice(longestCommonPrefixLength);
	const codeFileNameWithExtension = atSource.split(/[\\\/]/).toReversed()[0];
	const codeFileNameWithoutExtension = codeFileNameWithExtension.slice(0, codeFileNameWithExtension.lastIndexOf('.'));

	const warningHeaderTs = `// DO NOT MODIFY (your modifications will be overwritten)${"\n"}// This file is automatically (re-)generated by ${codeFileLocalPath}.${"\n\n"}`;
	const warningHeaderHtml = `<!-- DO NOT MODIFY (your modifications will be overwritten)${"\n"}     This file is automatically (re-)generated by ${codeFileLocalPath}. -->${"\n\n"}`;
	return {codeFileLocalPath, codeFileNameWithExtension, codeFileNameWithoutExtension, warningHeaderHtml, warningHeaderTs};
}